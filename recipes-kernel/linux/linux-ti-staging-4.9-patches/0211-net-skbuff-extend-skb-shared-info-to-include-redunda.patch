From 6af430f496cb5d025a794d1d346622ab4e895ff3 Mon Sep 17 00:00:00 2001
From: WingMan Kwok <w-kwok2@ti.com>
Date: Wed, 18 Apr 2018 17:36:24 -0400
Subject: [PATCH 211/223] net/skbuff: extend skb shared info to include
 redundant net info

This patch extends the skb shared info to include the
redundant network information from packets sent/received in
HSR/PRP networks. The redundant information includes
information from the HSR TAG, PRP RCT and the redundant port
on which the packet is sent/received.

Signed-off-by: WingMan Kwok <w-kwok2@ti.com>
---
 include/linux/skbuff.h | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 601dfa8..791a912 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -408,6 +408,14 @@ struct ubuf_info {
 	unsigned long desc;
 };
 
+struct skb_redundant_info {
+	__u8  io_port;     /* tx/rx port of the skb */
+	__u8  pathid;      /* pathid in tag */
+	__u16 ethertype;   /* ethertype in tag */
+	__u16 lsdu_size;   /* lsdu size in tag */
+	__u16 seqnr;       /* seqnr in tag */
+};
+
 /* This data is invariant across clones and lives at
  * the end of the header data, ie. at skb->end.
  */
@@ -420,6 +428,7 @@ struct skb_shared_info {
 	unsigned short  gso_type;
 	struct sk_buff	*frag_list;
 	struct skb_shared_hwtstamps hwtstamps;
+	struct skb_redundant_info redinfo;
 	u32		tskey;
 	__be32          ip6_frag_id;
 
@@ -1217,6 +1226,23 @@ static inline struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
 	return &skb_shinfo(skb)->hwtstamps;
 }
 
+#define PTP_MSG_IN      (0x3 << 6)
+#define PTP_EVT_OUT     (0x2 << 6)
+#define DIRECTED_TX     (0x1 << 6)
+#define PORT_B          BIT(1)
+#define PORT_A          BIT(0)
+
+#define REDINFO_T(skb)      (skb_redinfo(skb)->io_port & (0x3 << 6))
+#define REDINFO_PORTS(skb)  (skb_redinfo(skb)->io_port & 0x3)
+#define REDINFO_PATHID(skb) (skb_redinfo(skb)->pathid)
+#define REDINFO_SEQNR(skb)  (skb_redinfo(skb)->seqnr)
+#define REDINFO_LSDU_SIZE(skb)  (skb_redinfo(skb)->lsdu_size)
+
+static inline struct skb_redundant_info *skb_redinfo(struct sk_buff *skb)
+{
+	return &skb_shinfo(skb)->redinfo;
+}
+
 /**
  *	skb_queue_empty - check if a queue is empty
  *	@list: queue head
-- 
1.9.1

